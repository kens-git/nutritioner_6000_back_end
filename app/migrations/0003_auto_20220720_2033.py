# Generated by Django 4.0.6 on 2022-07-21 00:33

from django.db import migrations

UNITS_OF_MEASURE = {
  "Gram": "g",
  "Milligram": "mg",
  "Microgram": "ug",
  "Niacin Equivalent": "NE",
  "Retinol Equivalent": "RE",
  "Tablespoon": "tbsp",
  "Teaspoon": "tsp",
  "Cup": "c",
  "Liter": "L",
  "Milliliter": "mL",
  "Each": "ea",
  "Package": "pkg",
  "Piece": "pc",
}

NUTRIENTS = {
  "fat": ["Gram"],
  "saturated_fat": ["Gram"],
  "trans_fat": ["Gram"],
  "cholesterol": ["Milligram"],
  "sodium": ["Milligram"],
  "carbohydrates": ["Gram"],
  "fibre": ["Gram"],
  "sugar": ["Gram"],
  "protein": ["Gram"],
  "biotin": ["Microgram", 30],
  "calcium": ["Milligram", 1100],
  "chromium": ["Microgram", 120],
  "copper": ["Milligram", 2],
  "folacin": ["Microgram", 220],
  "iodide": ["Microgram", 160],
  "iron": ["Milligram", 14],
  "magnesium": ["Milligram", 250],
  "manganese": ["Milligram", 2],
  "molybdenum": ["Microgram", 75],
  "niacin": ["Niacin Equivalent", 23],
  "pantothenate": ["Milligram", 7],
  "phosphorous": ["Milligram", 1100],
  "potassium": ["Milligram", 3500],
  "riboflavin": ["Milligram", 1.6],
  "selenium": ["Microgram", 50],
  "thiamine": ["Milligram", 1.3],
  "vitamin_a": ["Retinol Equivalent", 1000],
  "vitamin_b6": ["Milligram", 1.8],
  "vitamin_b12": ["Microgram", 2],
  "vitamin_c": ["Milligram", 60],
  "vitamin_d": ["Microgram", 5],
  "vitamin_e": ["Milligram", 10],
  "zinc": ["Milligram", 9],
}

def populate_initial_data(apps, schema_editor):
  UnitOfMeasure = apps.get_model('app', 'UnitOfMeasure')
  for unit in UNITS_OF_MEASURE:
    UnitOfMeasure(name=unit, abbreviation=UNITS_OF_MEASURE[unit]).save()
  NutrientUnit = apps.get_model('app', 'NutrientUnit')
  DailyValue = apps.get_model('app', 'DailyValue')
  for nutrient in NUTRIENTS:
    print(nutrient)
    data = NUTRIENTS[nutrient]
    NutrientUnit(nutrient_name=nutrient,
      unit=UnitOfMeasure.objects.filter(name=data[0]).first()).save()
    if(len(data) == 2):
      print(data[1])
      DailyValue(nutrient_name=nutrient, value=data[1]).save()

class Migration(migrations.Migration):
  dependencies = [
    ('app', '0002_dailyvalue_nutrientunit'),
  ]
  operations = [
    migrations.RunPython(populate_initial_data),
  ]
