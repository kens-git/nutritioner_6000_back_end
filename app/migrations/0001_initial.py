# Generated by Django 4.0.6 on 2022-07-20 23:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fat', models.FloatField()),
                ('saturated_fat', models.FloatField()),
                ('trans_fat', models.FloatField()),
                ('cholesterol', models.FloatField()),
                ('sodium', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('fibre', models.FloatField()),
                ('sugar', models.FloatField()),
                ('protein', models.FloatField()),
                ('biotin', models.FloatField()),
                ('calcium', models.FloatField()),
                ('chromium', models.FloatField()),
                ('copper', models.FloatField()),
                ('folacin', models.FloatField()),
                ('iodide', models.FloatField()),
                ('iron', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('manganese', models.FloatField()),
                ('molybdenum', models.FloatField()),
                ('niacin', models.FloatField()),
                ('pantothenate', models.FloatField()),
                ('phosphorous', models.FloatField()),
                ('potassium', models.FloatField()),
                ('riboflavin', models.FloatField()),
                ('selenium', models.FloatField()),
                ('thiamine', models.FloatField()),
                ('vitamin_a', models.FloatField()),
                ('vitamin_b6', models.FloatField()),
                ('vitamin_b12', models.FloatField()),
                ('vitamin_c', models.FloatField()),
                ('vitamin_d', models.FloatField()),
                ('vitamin_e', models.FloatField()),
                ('zinc', models.FloatField()),
                ('name', models.TextField(unique=True)),
                ('reference_size', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('abbreviation', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fat', models.FloatField()),
                ('saturated_fat', models.FloatField()),
                ('trans_fat', models.FloatField()),
                ('cholesterol', models.FloatField()),
                ('sodium', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('fibre', models.FloatField()),
                ('sugar', models.FloatField()),
                ('protein', models.FloatField()),
                ('biotin', models.FloatField()),
                ('calcium', models.FloatField()),
                ('chromium', models.FloatField()),
                ('copper', models.FloatField()),
                ('folacin', models.FloatField()),
                ('iodide', models.FloatField()),
                ('iron', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('manganese', models.FloatField()),
                ('molybdenum', models.FloatField()),
                ('niacin', models.FloatField()),
                ('pantothenate', models.FloatField()),
                ('phosphorous', models.FloatField()),
                ('potassium', models.FloatField()),
                ('riboflavin', models.FloatField()),
                ('selenium', models.FloatField()),
                ('thiamine', models.FloatField()),
                ('vitamin_a', models.FloatField()),
                ('vitamin_b6', models.FloatField()),
                ('vitamin_b12', models.FloatField()),
                ('vitamin_c', models.FloatField()),
                ('vitamin_d', models.FloatField()),
                ('vitamin_e', models.FloatField()),
                ('zinc', models.FloatField()),
                ('timestamp', models.DateTimeField()),
                ('name', models.TextField(unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Intake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('serving_size', models.FloatField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.food')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='food',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.foodcategory'),
        ),
        migrations.AddField(
            model_name='food',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.unitofmeasure'),
        ),
    ]
